import Bond from './bonds';
import ItemBase from './itemsBase';
import { IPoint, IItemNode, IItemBoardProperties, IItemBaseOptions } from './interfaces';
import Point from './point';
import Circuit from './circuit';
import EC from './ec';
import Wire from './wire';
export default abstract class ItemBoard extends ItemBase {
    circuit: Circuit;
    protected settings: IItemBoardProperties;
    get onProp(): Function;
    get selected(): boolean;
    get bonds(): Bond[];
    get label(): string;
    abstract get count(): number;
    abstract valid(node: number): boolean;
    abstract get last(): number;
    abstract refresh(): ItemBoard;
    abstract nodeRefresh(node: number): ItemBoard;
    abstract getNode(node: number): IItemNode;
    abstract getNodeRealXY(node: number): Point;
    abstract setNode(node: number, p: IPoint): ItemBoard;
    abstract overNode(p: IPoint, ln: number): number;
    abstract findNode(p: Point): number;
    abstract nodeHighlightable(node: number): boolean;
    constructor(circuit: Circuit, options: IItemBaseOptions);
    select(value: boolean): ItemBoard;
    move(x: number, y: number): ItemBoard;
    setOnProp(value: Function): ItemBoard;
    bond(thisNode: number, ic: ItemBoard, icNode: number): boolean;
    nodeBonds(nodeName: number): Bond;
    unbond(node: number, id: string): void;
    unbondNode(node: number): void;
    disconnect(): void;
    propertyDefaults(): IItemBoardProperties;
    static connectedWiresTo(ecList: EC[]): Wire[];
    static wireConnections(wire: Wire): {
        it: EC | Wire;
        p: Point;
        n: number;
    }[];
}
