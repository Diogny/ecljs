declare const c: any;
export { c as consts };
declare const ts: (t: any) => any;
export { ts };
declare const empty: (s: any) => boolean;
export { empty };
export declare const typeOf: (o: any) => any;
export declare const isFn: (f: any) => boolean;
declare const dfnd: (t: any) => boolean;
export { dfnd };
declare const isStr: (s: any) => boolean;
export { isStr };
export declare const isObj: (t: any) => boolean;
declare const isArr: (t: any) => boolean;
export { isArr };
export declare const isNum: (n: any) => boolean;
export declare const isNumeric: (n: any) => boolean;
export declare const isInt: (n: any) => boolean;
export declare const pInt: (s: string, mag?: number | undefined) => number;
export declare const clamp: (v: number, min: number, max: number) => number;
export declare const round: (v: number, decimals: number) => number;
export declare const splat: (o: any) => any;
export declare const extend: (obj: any, src: any) => any;
export declare const copy: (obj: any, src: any) => any;
export declare const inherit: (parent: any, child: any) => void;
/**
 * @description returns true if an element if an HTML or SVG DOM element
 * @param e {any} an element
 */
export declare const isElement: (e: any) => boolean;
declare const pojo: (arg: any) => boolean;
export { pojo };
declare const obj: (o: any) => any;
export { obj };
export declare const clone: <T>(o: T) => T;
export declare const defEnum: (e: any) => any;
export declare const css: (el: any, styles: any) => any;
export declare const attr: (el: any, attrs: any) => any;
export declare const propDescriptor: (obj: any, prop: string) => PropertyDescriptor;
export declare const aEL: (el: HTMLElement, eventName: string, fn: Function, b?: boolean | AddEventListenerOptions | undefined) => void;
export declare const rEL: (el: HTMLElement, eventName: string, fn: Function, b?: boolean | AddEventListenerOptions | undefined) => void;
export declare const dP: (obj: any, propName: string, attrs: object) => any;
export declare const aCld: (parent: any, child: any) => any;
export declare const hasClass: (el: Element, className: string) => boolean;
declare const addClass: (el: Element, className: string) => void;
export { addClass };
declare const removeClass: (el: Element, className: string) => void;
export { removeClass };
export declare const toggleClass: (el: Element, className: string) => boolean;
export declare const condClass: (el: any, className: string, b: boolean) => void | 1;
export declare const getParentAttr: (p: HTMLElement, attr: string) => HTMLElement;
export declare const range: (s: number, e: number) => number[];
declare const unique: (x: any[]) => any[];
export { unique };
declare const union: (x: any[], y: any[]) => any[];
export { union };
export declare const addClassX: (el: Element, className: string) => Element;
export declare const createClass: (baseClass: string, newClass: string) => string;
export declare const selectMany: <TIn, TOut>(input: TIn[], selectListFn: (t: TIn) => TOut[]) => TOut[];
export declare const toBool: (val: any) => boolean;
